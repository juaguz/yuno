// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cards/cardservice.go
//
// Generated by this command:
//
//	mockgen -source=internal/cards/cardservice.go -destination=internal/cards/mocks/card_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dtos "github.com/juaguz/yuno/internal/cards/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCardRepository) Create(ctx context.Context, card *dtos.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCardRepositoryMockRecorder) Create(ctx, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCardRepository)(nil).Create), ctx, card)
}

// Delete mocks base method.
func (m *MockCardRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCardRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCardRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCardRepository) Get(ctx context.Context, id uuid.UUID) (*dtos.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*dtos.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCardRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCardRepository)(nil).Get), ctx, id)
}

// UpdateOne mocks base method.
func (m *MockCardRepository) UpdateOne(ctx context.Context, card *dtos.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockCardRepositoryMockRecorder) UpdateOne(ctx, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockCardRepository)(nil).UpdateOne), ctx, card)
}

// MockKmsRepository is a mock of KmsRepository interface.
type MockKmsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKmsRepositoryMockRecorder
}

// MockKmsRepositoryMockRecorder is the mock recorder for MockKmsRepository.
type MockKmsRepositoryMockRecorder struct {
	mock *MockKmsRepository
}

// NewMockKmsRepository creates a new mock instance.
func NewMockKmsRepository(ctrl *gomock.Controller) *MockKmsRepository {
	mock := &MockKmsRepository{ctrl: ctrl}
	mock.recorder = &MockKmsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKmsRepository) EXPECT() *MockKmsRepositoryMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockKmsRepository) Decrypt(ctx context.Context, data, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, data, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockKmsRepositoryMockRecorder) Decrypt(ctx, data, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKmsRepository)(nil).Decrypt), ctx, data, key)
}

// MockVaultRepository is a mock of VaultRepository interface.
type MockVaultRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVaultRepositoryMockRecorder
}

// MockVaultRepositoryMockRecorder is the mock recorder for MockVaultRepository.
type MockVaultRepositoryMockRecorder struct {
	mock *MockVaultRepository
}

// NewMockVaultRepository creates a new mock instance.
func NewMockVaultRepository(ctrl *gomock.Controller) *MockVaultRepository {
	mock := &MockVaultRepository{ctrl: ctrl}
	mock.recorder = &MockVaultRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultRepository) EXPECT() *MockVaultRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVaultRepository) Create(ctx context.Context, data map[string]any, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVaultRepositoryMockRecorder) Create(ctx, data, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVaultRepository)(nil).Create), ctx, data, key)
}

// Delete mocks base method.
func (m *MockVaultRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVaultRepositoryMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVaultRepository)(nil).Delete), ctx, key)
}
